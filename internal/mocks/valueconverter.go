// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ValueConverter is an autogenerated mock type for the ValueConverter type
type ValueConverter struct {
	mock.Mock
}

// ToBool provides a mock function with given fields: _a0
func (_m *ValueConverter) ToBool(_a0 interface{}) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ToFloat provides a mock function with given fields: _a0
func (_m *ValueConverter) ToFloat(_a0 interface{}) float64 {
	ret := _m.Called(_a0)

	var r0 float64
	if rf, ok := ret.Get(0).(func(interface{}) float64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// ToInt provides a mock function with given fields: _a0
func (_m *ValueConverter) ToInt(_a0 interface{}) int {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(interface{}) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ToString provides a mock function with given fields: _a0
func (_m *ValueConverter) ToString(_a0 interface{}) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ToStringSlice provides a mock function with given fields: _a0
func (_m *ValueConverter) ToStringSlice(_a0 interface{}) []string {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(interface{}) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}
